import org.jetbrains.kotlin.gradle.dsl.KotlinVersion

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.115'
    id 'org.jetbrains.kotlin.jvm' version '2.2.20'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven { url = "https://maven.createmod.net" }
    maven { url = "https://mvn.devos.one/snapshots" }
    maven {
        url "https://maven.su5ed.dev/releases"
    }
    maven { url 'https://maven.fallenbreath.me/releases' } // conditionalmixin
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
kotlin {
    compilerOptions {
        languageVersion.set(KotlinVersion.KOTLIN_2_3)
        freeCompilerArgs.addAll([
                "-Xdata-flow-based-exhaustiveness",
                "-Xallow-contracts-on-more-functions",
                "-Xallow-condition-implies-returns-contracts",
                "-Xwhen-expressions=indy",
                "-Xallow-holdsin-contract"
        ])
    }
    jvmToolchain(21)
}

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            jvmArguments.add('-XX:+AllowEnhancedClassRedefinition')
            programArguments.addAll '--quickPlaySingleplayer', 'New Instance'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }


        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation 'thedarkcolour:kotlinforforge-neoforge:5.3.0'
    implementation(jarJar('me.fallenbreath:conditional-mixin-neoforge:0.6.4'))

    compileOnly "dev.engine-room.flywheel:flywheel-neoforge-${minecraft_version}:${flywheel_version}"
    //localRuntime "dev.engine-room.flywheel:flywheel-neoforge-${minecraft_version}:${flywheel_version}"
    localRuntime files(System.getProperty("user.home") + "/IdeaProjects/Flywheel/neoforge/build/libs/flywheel-neoforge-1.21.1-1.0.4.jar")

    compileOnly "dev.engine-room.vanillin:vanillin-neoforge-${minecraft_version}:${vanillin_version}"

    localRuntime "dev.engine-room.vanillin:vanillin-neoforge-${minecraft_version}:${vanillin_version}"

    // # compat
    compileOnly('maven.modrinth:continuity:3.0.0+1.21.neoforge') { transitive = false }
    compileOnly "org.sinytra.forgified-fabric-api:fabric-renderer-api-v1:3.4.0+acb05a3919"

    implementation("com.simibubi.create:create-${minecraft_version}:${create_version}") { transitive = false }
    implementation "com.tterrag.registrate:Registrate:${registrate_version}"
    implementation("net.createmod.ponder:Ponder-NeoForge-$minecraft_version:$ponder_version") { transitive = false }
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neo_version,
                             neo_version_range      : neo_version_range,
                             loader_version_range   : loader_version_range,
                             mod_id                 : mod_id,
                             mod_name               : mod_name,
                             mod_license            : mod_license,
                             mod_version            : mod_version,
                             mod_authors            : mod_authors,
                             mod_description        : mod_description,
                             flywheel_version       : flywheel_version,
                             vanillin_version       : vanillin_version,
                             registrate_version     : registrate_version,
                             create_dependency_version : create_dependency_version, // TODO: fix
                             ponder_version         : ponder_version
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
